@if (Lyrics is null)
{
    <div class="bg-orange -mx-[10px] items-center text-white p-4">
        This song has no lyrics
    </div>
    return;
}
@if (Lyrics.Count > 0)
{
    <div id="lyric" class="h-full flex flex-col space-y-reverse space-y-2 -mx-[10px]" tabindex="0" @onkeydown="KeyPress">
        <Virtualize Items="Lyrics" Context="lyric">
            <div class="hidden">
                @{
                    bool isHighlighted = SelectedLyric?.ID == lyric.ID;
                }
            </div>

            <div class="xl:flex group" @onclick="async () => { await SelectionChanged(lyric); }">
                <div class="w-full xl:w-10 mr-2 hidden xl:grid xl:bg-gray items-center text-center text-white_normal group-hover:text-white">
                    @lyric.Line
                </div>
                <div class="p-4 w-full text-center select-none whitespace-pre cursor-pointer @(isHighlighted ? "highlighted bg-primary text-white_light" : "bg-gray_dark text-white_normal group-hover:text-white_light")">
                    @Lyric(lyric.Text)
                </div>
            </div>
        </Virtualize>
    </div>
}
else
{
    <div class="bg-orange -mx-[10px] items-center text-white p-4">
        This song has no lyrics
    </div>
}


@code {
    [Inject] IJSRuntime JS { get; set; }

    private List<Lyric> lyrics;
    [Parameter] public List<Lyric> Lyrics { get; set; }
    [Parameter] public EventCallback<Lyric> LyricSelect { get; set; }
    [Parameter] public Lyric SelectedLyric { get; set; }
    [Parameter] public bool CanSelect { get; set; }

    private bool fromEnter;
    private static LyricList lyricList;
    public LyricList()
    {
        lyricList = this;
    }

    private RenderFragment Lyric(string lyric) => (builder) =>
    {
        builder.AddMarkupContent(0, $"{lyric}");
    };

    protected override void OnParametersSet()
    {
        if (lyrics != Lyrics)
        {
            if(!fromEnter)
                SelectedLyric.ID = 0;
            lyrics = Lyrics;
        }
    }

    private async Task KeyPress(KeyboardEventArgs args)
    {
        try
        {
            if (args.Key == Key.Escape) return;
            int index = Lyrics.FindIndex(s => s.ID == SelectedLyric.ID);

            if (args.Code == "ArrowDown") index += ((index += 1) >= Lyrics.Count) ? 0 : 1;
            else if (args.Code == "ArrowUp") index -= ((index -= 1) < 0) ? 0 : 1;

            await SelectionChanged(Lyrics[index]);
        }
        catch (Exception ex)
        {

        }
    }

    [JSInvokable]
    public static async void JStoCSCalllyric()
    {
        lyricList.fromEnter = true;
        await lyricList.SelectionChanged(lyricList.Lyrics[0]);
    }

    private async Task SelectionChanged(Lyric lyric) 
    {
        if (!CanSelect) return;
        
        await LyricSelect.InvokeAsync(lyric);
        SelectedLyric = lyric;

        await Task.Delay(1); //Delay so the right id will be selected by ScrollToView
        await ScrollToView("lyric");
        fromEnter = false;
    }

    private async Task ScrollToView(string id) => await JS.InvokeVoidAsync("ScrollToItem", id);
}
