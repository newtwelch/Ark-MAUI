@if (Songs.Count > 0)
{
    <div id="song" class="h-full -mx-[10px]" tabindex="0" @onkeydown="KeyPress">
        <Virtualize Items="Songs" Context="song" ItemSize="80">
             <span class="hidden h-0">
                 @{
                     bool isHighlighted = Song?.ID == song?.ID;
                 }
             </span>

            <div class="p-4 h-20 bg-gray w-full flex select-none items-center whitespace-pre cursor-pointer group hover:text-white @(isHighlighted ? "highlighted bg-primary text-white highlighted" : "text-white_normal")"
             @onclick="async () => { await SelectionChanged(song); }">
                 <div class="w-full mr-2 overflow-hidden flex flex-col">
                     <p class="w-full truncate text-ellipsis overflow-hidden">@Title(song)</p>
                     <p class="w-full truncate text-ellipsis overflow-hidden opacity-75 text-xs">@Secondary(song)</p>
                 </div>
                 <button class="w-10 h-10 font-ark @(song.InQueue ? "hidden" : "")  @(isHighlighted ? "text-white_light hover:text-gray" : "text-white_normal hover:text-primary")"
                         @onclick="() => { SelectionAddToQueue(song); }" @onclick:stopPropagation="true">A</button>
                 <button class="w-10 h-10 -mr-2 @(song.InQueue ? "" : "hidden")  @(isHighlighted ? "text-white_light hover:text-gray" : "text-white_normal hover:text-red")"
                 @onclick="() => { SelectionRemoveToQueue(song); }" @onclick:stopPropagation="true">
                     <svg fill="currentColor" height="1em" viewBox="0 0 512 512"><path d="M64 32C28.7 32 0 60.7 0 96V416c0 35.3 28.7 64 64 64H384c35.3 0 64-28.7 64-64V96c0-35.3-28.7-64-64-64H64zm88 200H296c13.3 0 24 10.7 24 24s-10.7 24-24 24H152c-13.3 0-24-10.7-24-24s10.7-24 24-24z" /></svg>
                 </button>
                 <button class="w-10 h-10 font-ark  @(isHighlighted ? "text-white_light" : "text-white_normal") hover:text-red"
                         @onclick="() => { SelectionDelete(song); }" @onclick:stopPropagation="true">D</button>
            </div>    
        </Virtualize>
    </div>
}


@code {
    [Inject] IJSRuntime JS { get; set; }
    [Parameter] public List<Song> Songs { get; set; }
    [Parameter] public EventCallback<Song> SelectedSong { get; set; }
    [Parameter] public EventCallback<Song> DeleteSong { get; set; }
    [Parameter] public EventCallback<Song> AddToQueue { get; set; }
    [Parameter] public EventCallback<Song> RemoveToQueue { get; set; }
    [Parameter] public Song Song { get; set; } = new Song();

    private static SongList songList;
    public SongList()
    {
        songList = this;
    }

    private string titleHighlightKept = "";
    private string tagHighlightKept = "";
    private string authorHighlightKept = "";
    private string rawLyricsHighlightKept = "";
    private int ItemCount = 0;
    private int LastIndex = 0;

    private RenderFragment Title(Song song) => (builder) =>
    {
        builder.AddMarkupContent(0, $"{song.Title}");
    };

    private RenderFragment Secondary(Song song) => (builder) =>
    {
        if (song.RawLyrics.Contains("<span class=\"text-orange group-hover:text-white_light\">"))
        {
            string rawLyric = song.RawLyrics.Substring(song.RawLyrics.IndexOf("<span class=\"text-orange group-hover:text-white_light\">", StringComparison.OrdinalIgnoreCase))
                                                 .Replace("\n", " ").Replace("\r", " ");

            rawLyric = rawLyric.Replace("<span class=\"text-orange group-hover:text-white_light\">", "");
            rawLyric = rawLyric.Replace("</span>", "");
            song.LyricHighlighted = rawLyric.Substring(0, Math.Min(rawLyric.Length, 50)) + "...";
            builder.AddMarkupContent(0, $"<span class=\"text-orange group-hover:text-white_light\">{song.LyricHighlighted}</span></br>");
        }

        if (song.Tags.Contains("<span class=\"text-orange group-hover:text-white_light\">"))
        {
            string tag = song.Tags.Substring(song.Tags.IndexOf("<span class=\"text-orange group-hover:text-white_light\">", StringComparison.OrdinalIgnoreCase))
                                                 .Replace("\n", " ").Replace("\r", " ");
            builder.AddMarkupContent(0, $"{song.Tags}</br>");
        }

        if (song.Author.Contains("Author") || String.IsNullOrWhiteSpace(song.Author)) return;
        builder.AddMarkupContent(0, $"{song.Author}");
    };

    private async Task ScrollToView(string id) => await JS.InvokeVoidAsync("ScrollToItem", id);

    private async Task SelectionChanged(Song song)
    {
        if (Song.ID != song.ID)
        {
            Song.Title = titleHighlightKept;
            Song.Tags = tagHighlightKept;
            Song.Author = authorHighlightKept;
            Song.RawLyrics = rawLyricsHighlightKept;
        }
        
            tagHighlightKept = song.Tags;
            titleHighlightKept = song.Title;
            authorHighlightKept = song.Author;
            rawLyricsHighlightKept = song.RawLyrics;
        

        Song = song;

        await SelectedSong.InvokeAsync(song);

        LastIndex = Songs.FindIndex(s => s.ID == Song.ID);

        await Task.Delay(1); //Delay so the right id will be selected by ScrollToView
        await ScrollToView("song");//
    }

    private async Task KeyPress(KeyboardEventArgs args)
    {
        try
        {
            int index = Songs.FindIndex(s => s.ID == Song.ID);

            if (args.Code == "ArrowDown") index += ((index += 1) >= Songs.Count) ? 0 : 1;
            else if (args.Code == "ArrowUp") index -= ((index -= 1) < 0) ? 0 : 1;
            if (args.Code == "Enter") await JS.InvokeVoidAsync("focusInput", "lyric");

            await SelectionChanged(Songs[index]);

        }
        catch (Exception ex)
        {

        }
    }


    [JSInvokable]
    public static async void JStoCSCallsong()
    {
        await songList.SelectionChanged(songList.Songs[0]);
    }
    
    private async void SelectionDelete(Song song) => await DeleteSong.InvokeAsync(song);
    private async void SelectionAddToQueue(Song song) => await AddToQueue.InvokeAsync(song);
    private async void SelectionRemoveToQueue(Song song) => await RemoveToQueue.InvokeAsync(song);

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            StateHasChanged();
        }
    }
}
