@inject ToastService ToastService
@implements IDisposable

<button type="button" @onclick="HideToast" class="absolute bg-@_color @(_isVisible ? "opacity-100" : "opacity-0 pointer-events-none") left-1/2 transform -translate-x-1/2 bottom-4 z-50 transition-opacity ease-in-out hover:bg-opacity-50">
    <div class="flex flex-col bg-gray_dark px-4 py-2 mt-2 text-white_light items-center">
        <h2 class="text-lg text-@_color">@_heading</h2>
        <p>@_message</p>
    </div>
</button>

@code {
    private string _heading;
    private string _message;
    private string _color;
    private bool _isVisible;

    protected override void OnInitialized()
    {
        ToastService.OnShow += ShowToast;
        ToastService.OnHide += HideToast;
    }

    private async void ShowToast(string message, string heading, ToastLevel level)
    {
        BuildToastSettings(level, message, heading);
        _heading = heading;
        _isVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async void HideToast()
    {
        _isVisible = false;
        await InvokeAsync(StateHasChanged);
    }

    private void BuildToastSettings(ToastLevel level, string message, string heading)
    {
        switch (level)
        {
            case ToastLevel.Info:
                _color = $"primary";
                break;
            case ToastLevel.Success:
                _color = $"green";
                break;
            case ToastLevel.Warning:
                _color = $"orange";
                break;
            case ToastLevel.Error:
                _color = "red";
                break;
            default:
                throw new ArgumentOutOfRangeException(nameof(level), level, null);
        }
        _heading = heading;
        _message = message;
    }

    void IDisposable.Dispose()
    {
        ToastService.OnShow -= ShowToast;
        ToastService.OnHide -= HideToast;
    }
}