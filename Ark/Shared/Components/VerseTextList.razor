@inject DisplayService displayService

@if (Verses.Count > 0)
{
    <p id="verseText" class="w-full highlighted p-2 leading-9 bg-primary text-white_light" tabindex="0" @onkeydown="KeyPress">
        @foreach(var verse in Verses)
        {
            <span class="hidden h-0">
                @{
                    bool isHighlighted = Verse.Item1 == verse.Item1;
                }
            </span>

            <span class="cursor-pointer px-2 py-1 m-2 @(isHighlighted ? "text-orange bg-gray_darkest" : "bg-gray")" @onclick="async () => { await SelectionChanged(verse); }">
                @verse.Item2
            </span>
        }
    </p>
}


@code {
    [Inject] IJSRuntime JS { get; set; }
    private List<Tuple<int, string>> verses;
    [Parameter] public List<Tuple<int, string>> Verses { get; set; }
    [Parameter] public EventCallback<Tuple<int, string>> SelectedVerse { get; set; }
    [Parameter] public Tuple<int, string> Verse { get; set; } = new Tuple<int, string>(100, "");


    protected override void OnParametersSet()
    {
        if (verses != Verses)
        {
            Verse = new Tuple<int, string>(100, "");
            verses = Verses;
        }
    }

    private static VerseTextList verseTextList;
    public VerseTextList()
    {
        verseTextList = this;
    }

    private int ItemCount = 0;
    private int LastIndex = 0;

    private async Task SelectionChanged(Tuple<int, string> verse)
    {
        Verse = verse;

        displayService.BibleVerseToDisplay = displayService.BibleVerseToDisplay.Replace("<span class=\"text-orange group-hover:text-white_light\">", "");
        displayService.BibleVerseToDisplay = displayService.BibleVerseToDisplay.Replace("</span>", "");

        int startIndex = displayService.BibleVerseToDisplay.ToLower().IndexOf(verse.Item2.ToLower());
        int endIndex = startIndex + verse.Item2.Length;
        string wrap = displayService.BibleVerseToDisplay.Substring(startIndex, endIndex - startIndex);
        wrap = displayService.BibleVerseToDisplay.Replace(wrap, "<span class=\"text-orange group-hover:text-white_light\">" + wrap + "</span>");
        displayService.BibleVerseToDisplay = wrap;

        await SelectedVerse.InvokeAsync(Verse);
        LastIndex = Verses.FindIndex(v => v == Verse);
    }

    private async Task KeyPress(KeyboardEventArgs args)
    {
        try
        {
            int index = Verses.FindIndex(v => v == Verse);
            if (args.Code == "ArrowDown")
            {
                if (index == Verses.Count - 1)
                {
                    await JS.InvokeVoidAsync("nextVerse", false);
                }
                index += ((index += 1) >= Verses.Count) ? 0 : 1;
            }
            else if (args.Code == "ArrowUp")
            {
                if (index == 0)
                {
                    await JS.InvokeVoidAsync("nextVerse", true);
                }
                index -= ((index -= 1) < 0) ? 0 : 1;
            }


            await SelectionChanged(Verses[index]);

        }
        catch (Exception ex)
        {

        }
    }

    [JSInvokable]
    public static async void JStoCSCallverseText()
    {
        await verseTextList.SelectionChanged(verseTextList.Verses[0]);
    }

}
